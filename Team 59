import os
import eel
import subprocess

from engine.features import *
from engine.command import *
from engine.auth import recoganize

def start():
    eel.init("www")  # Initialize Eel with the 'www' directory

    # Optional: Open the browser before starting the eel server
    try:
        os.startfile('http://localhost:8000/index.html')  # Open in default browser (or Edge)
    except Exception as e:
        print(f"Error opening browser: {e}")

    playAssistantSound()

    @eel.expose
    def init():
        subprocess.call([r'device.bat'])
        eel.hideLoader()
        speak("Ready for Face Authentication")
        
        flag = recoganize.AuthenticateFace()
        if flag == 1:
            eel.hideFaceAuth()
            speak("Face Authentication Successful")
            eel.hideFaceAuthSuccess()
            speak("Hello, Welcome, How can I Help You")
            eel.hideStart()
            playAssistantSound()
        else:
            speak("Face Authentication Fail")
    
    # Start the eel server (blocks until the server is stopped)
    eel.start('index.html', mode=None, host='localhost', block=True)

if __name__ == "__main__":
    start()
import ctypes
import os
import random
import pyttsx3
import speech_recognition as sr
import eel
import time
import openai
import sys
import sympy as sp
import eel

@eel.expose
def speak(text):
    text = str(text)
    engine = pyttsx3.init('sapi5')
    voices = engine.getProperty('voices') 
    engine.setProperty('voice', voices[0].id)
    engine.setProperty('rate', 174)
    eel.DisplayMessage(text)()
    engine.say(text)
    eel.receiverText(text)
    engine.runAndWait()
@eel.expose
def solve_equation(equation):
    try:
        
        equation = equation.replace('^', '**') 
        lhs, rhs = equation.split("=") 
        lhs = sp.sympify(lhs)  
        rhs = sp.sympify(rhs)
        solution = sp.solve(lhs - rhs)  
        if solution:
            result = f"The solution is: {solution}"
        else:
            result = "No solution found."
        
        eel.DisplayMessage(result)()
        return result  
    except Exception as e:
        eel.DisplayMessage(f"Error solving equation: {str(e)}")()
        return f"Error: {str(e)}"

@eel.expose
def takecommand():
    r = sr.Recognizer()
    with sr.Microphone() as source:
        print('Listening...')
        eel.DisplayMessage('Listening...')()  # Display message for listening
        r.pause_threshold = 1   #how longer the recognizer will wait
        r.adjust_for_ambient_noise(source)#adjusting the background noise
        r.energy_threshold = 4000  # Adjust energy threshold if needed
        try:
            # Listen for audio for a limited time
            audio = r.listen(source, timeout=10, phrase_time_limit=5)
        except sr.WaitTimeoutError:
            print("Listening timed out.")
            eel.DisplayMessage('Listening timed out. Please try again.')()
            return ""
        except Exception as e:
            print(f"Error listening: {e}")
            return ""
    try:
        print('Recognizing...')
        eel.DisplayMessage('Recognizing...')()  # Display message for recognition
        query = r.recognize_google(audio, language='en-in')
        print(f"User said: {query}")
        eel.DisplayMessage(query)()  # Show recognized text
        return query.lower()
    except Exception as e:
        print(f"Error recognizing: {e}")
        eel.DisplayMessage(f'Error: {e}')()
        return ""
    except sr.UnknownValueError:
        print("Sorry, I couldn't understand the audio.")
        eel.DisplayMessage("Sorry, I couldn't understand the audio.")()
        return ""
    except sr.RequestError:
        print("Could not request results from Google Speech Recognition service.")
        eel.DisplayMessage("Error with the speech recognition service.")()
        return ""
@eel.expose
def allCommands(message=1):
    print(f"Message received from frontend: {message}")
    if message == 1:
        query = takecommand()
        print(query)
    elif "open" in message:
        from engine.features import openCommand
        openCommand(message)
        eel.ShowHood()
    elif "weather condition" in message:
        from engine.features import getWeather
        getWeather(message)
        eel.ShowHood()
    elif "change background" in message or "change wallpaper" in message:
        img = r"C:/Users/yukkt/Downloads/images"  # Ensure correct path
        list_img = [file for file in os.listdir(img) if file.endswith(('.jpg', '.jpeg', '.png', '.bmp', '.gif'))]
        
        if list_img:  # Check if images are available
            imgChoice = random.choice(list_img)
            randomImg = os.path.join(img, imgChoice)
            randomImg = os.path.abspath(randomImg)  # Absolute path of the image
            
            SPI_SETDESKWALLPAPER = 20  # Constant for changing wallpaper
            result = ctypes.windll.user32.SystemParametersInfoW(SPI_SETDESKWALLPAPER, 0, randomImg, 0)
            
            if result:  # Check if the wallpaper change was successful
                speak("Background changed successfully")
            else:
                speak("Failed to change background. Please try again.")
        else:
            speak("No images found in the specified directory.")
    elif "send message" in message or "phone call" in message or "video call" in message:
            from engine.features import findContact, whatsApp, makeCall, sendMessage
            contact_no, name = findContact(message)
            if(contact_no != 0):
                speak("Which mode you want to use whatsapp or mobile")
                preferance = takecommand()
                print(preferance)

                if "mobile" in preferance:
                    if "send message" in message or "send sms" in message: 
                        speak("what message to send")
                        message_type= takecommand()
                        sendMessage(message_type, contact_no, name)
                    elif "phone call" in message:
                        makeCall(name, contact_no)
                    else:
                        speak("please try again")
                elif "whatsapp" in preferance:
                    message_type= ""
                    if "send message" in message:
                        message_type= 'message'
                        speak("what message to send")
                        message= takecommand()
                                        
                    elif "phone call" in message:
                        message_type= 'call'
                    else:
                        message_type= 'video call'
                                        
                    whatsApp(contact_no, message, message_type, name)
    elif "on youtube" in message.lower():  # Check if 'on youtube' is part of the query
            print("youtube")
            from engine.features import PlayYoutube
            PlayYoutube(message)

    elif "solve equation" in message.lower():  
        equation = message.replace("solve equation", "").strip()  # Remove the trigger phrase from the input
        if equation:
            solution = solve_equation(equation)  # Solve the equation
            speak(f"Here is the solution: {solution}")  # Provide the solution to the user
        else:
            speak("You need to provide an equation to solve.")

    else:
            print("No conditions matched, executing else block.")
            from engine.features import chatBot
            chatBot(message)
        
    try:
        query=takecommand()
        print(query)
        if "open" in query:
            from engine.features import openCommand
            openCommand(query)

        elif "on youtube" in query.lower():  # Check if 'on youtube' is part of the query
            print("youtube")
            from engine.features import PlayYoutube
            PlayYoutube(query)

            
        elif "send message" in query or "phone call" in query or "video call" in query:
            from engine.features import findContact, whatsApp, makeCall, sendMessage
            contact_no, name = findContact(query)
            if(contact_no != 0):
                speak("Which mode you want to use whatsapp or mobile")
                preferance = takecommand()
                print(preferance)

                if "mobile" in preferance:
                    if "send message" in query or "send sms" in query: 
                        speak("what message to send")
                        message = takecommand()
                        sendMessage(message, contact_no, name)
                    elif "phone call" in query:
                        makeCall(name, contact_no)
                    else:
                        speak("please try again")
                elif "whatsapp" in preferance:
                    message = ""
                    if "send message" in query:
                        message = 'message'
                        speak("what message to send")
                        query = takecommand()
                                        
                    elif "phone call" in query:
                        message = 'call'
                    else:
                        message = 'video call'
                                        
                    whatsApp(contact_no, query, message, name)
        
        elif "change background" in query or "change wallpaper" in query:
          img = r"C:/Users/yukkt/Downloads/images"  # Ensure correct path
          list_img = [file for file in os.listdir(img) if file.endswith(('.jpg', '.jpeg', '.png', '.bmp', '.gif'))]
        
          if list_img:  # Check if images are available
            imgChoice = random.choice(list_img)
            randomImg = os.path.join(img, imgChoice)
            randomImg = os.path.abspath(randomImg)  # Absolute path of the image
            
            SPI_SETDESKWALLPAPER = 20  # Constant for changing wallpaper
            result = ctypes.windll.user32.SystemParametersInfoW(SPI_SETDESKWALLPAPER, 0, randomImg, 0)
            
            if result:  # Check if the wallpaper change was successful
                speak("Background changed successfully")
            else:
                speak("Failed to change background. Please try again.")
    
        elif "weather condition" in query:
            from engine.features import getWeather
    
            getWeather(query)

        else:
            print("No conditions matched, executing else block.")
            from engine.features import chatBot
            chatBot(query)
        
    except:
        print("error")

    eel.ShowHood()
import os
from pipes import quote
import re
import sqlite3
import struct
import subprocess
import time
import webbrowser
from fpdf import FPDF
from playsound import playsound
import eel
import pyaudio
import pyautogui
from engine.command import speak, takecommand
from engine.config import ASSISTANT_NAME
# Playing assiatnt sound function
import pywhatkit as kit
import pvporcupine
import numpy as np
from engine.helper import extract_yt_term, remove_words
from hugchat import hugchat
con = sqlite3.connect("jarvis.db")
cursor = con.cursor()

@eel.expose
def playAssistantSound():
    music_dir = "www\\assets\\audio\\start_sound.mp3"
    playsound(music_dir)
import requests
def getWeather(query):
    api_key = "f661480d987feac4ef21e0e009f0e320"
    cities = ["Delhi", "Mumbai", "Bengaluru", "Chennai", "Kolkata", "Hyderabad", "Pune", "Jaipur", "Ahmedabad", "Lucknow"]
    location = None
    for city in cities:
        if city.lower() in query.lower():
            location = city
            break
    
    if not location:
        speak("Please specify the city name to get the weather information.")
        return
    
    url = f"http://api.openweathermap.org/data/2.5/weather?q={location}&appid={api_key}&units=metric"
    
    try:
        response = requests.get(url).json()
    except requests.exceptions.RequestException as e:
        speak("Network issue, please check your internet connection.")
        print(e)
        return
    print(response)
    if response.get('cod') != 200:
        speak(f"Could not fetch weather for {location}. Reason: {response.get('message', 'Unknown error')}")
    else:
        temp = response['main']['temp']
        description = response['weather'][0]['description']
        speak(f"The temperature in {location} is {temp}°C with {description}") 
def openCommand(query):
    query = query.replace(ASSISTANT_NAME, "")
    query = query.replace("open", "")
    query.lower()
    app_name = query.strip()

    if app_name != "":

        try:
            cursor.execute(
                'SELECT path FROM sys_command WHERE name IN (?)', (app_name,))
            results = cursor.fetchall()

            if len(results) != 0:
                speak("Opening "+query)
                os.startfile(results[0][0])

            elif len(results) == 0: 
                cursor.execute(
                'SELECT url FROM web_command WHERE name IN (?)', (app_name,))
                results = cursor.fetchall()
                
                if len(results) != 0:
                    speak("Opening "+query)
                    webbrowser.open(results[0][0])

                else:
                    speak("Opening "+query)
                    try:
                        os.system('start '+query)
                    except:
                        speak("not found")
        except:
            speak("some thing went wrong")
def PlayYoutube(query):
    search_term = extract_yt_term(query)
    
    if search_term:
        speak("Playing " + search_term + " on YouTube")
        kit.playonyt(search_term)
    else:
        speak("I couldn't understand what you want to play on YouTube.")
def hotword():
    porcupine = None
    paud = None
    audio_stream = None
    try:
        # pre trained keywords    
        porcupine = pvporcupine.create(keywords=["jarvis","alexa"]) 
        paud = pyaudio.PyAudio()
        audio_stream = paud.open(
            rate=porcupine.sample_rate,
            channels=1,
            format=pyaudio.paInt16,
            input=True,
            frames_per_buffer=porcupine.frame_length
        )
        
        print("Listening for hotword...")
        while True:
            keyword = audio_stream.read(porcupine.frame_length)
            keyword = np.frombuffer(keyword, dtype=np.int16)

            # processing keyword comes from mic 
            keyword_index = porcupine.process(keyword)

            print(f"Keyword Index: {keyword_index}")  # Debug statement

            # checking if a keyword is detected
            if keyword_index >= 0:
                print("Hotword detected!")
                
                # pressing shortcut key win+j
                pyautogui.keyDown("win")
                pyautogui.press("j")
                time.sleep(0.2)
                pyautogui.keyUp("win")
                
    except Exception as e:
        print(f"Error occurred: {e}")
    finally:
        if porcupine is not None:
            porcupine.delete()
        if audio_stream is not None:
            audio_stream.close()
        if paud is not None:
            paud.terminate()
# find contacts
def findContact(query):
    
    words_to_remove = [ASSISTANT_NAME, 'make', 'a', 'to', 'phone', 'call', 'send', 'message', 'wahtsapp', 'video']
    query = remove_words(query, words_to_remove)

    try:
        query = query.strip().lower()
        cursor.execute("SELECT mobile_no FROM contacts WHERE LOWER(name) LIKE ? OR LOWER(name) LIKE ?", ('%' + query + '%', query + '%'))
        results = cursor.fetchall()
        print(results[0][0])
        mobile_number_str = str(results[0][0])

        if not mobile_number_str.startswith('+91'):
            mobile_number_str = '+91' + mobile_number_str

        return mobile_number_str, query
    except:
        speak('not exist in contacts')
        eel.ShowHood()
        return 0, 0   
try:
  def whatsApp(mobile_no, message, flag, name):
    if flag == 'message':
        target_tab =19
        jarvis_message = "message send successfully to "+name
        eel.ShowHood()

    elif flag == 'call':
        target_tab=14
        message = ''
        jarvis_message = "calling to "+name
        eel.ShowHood()

    else:
        target_tab = 13
        message = ''
        jarvis_message = "staring video call with "+name
        eel.ShowHood()


    # Encode the message for URL
    encoded_message = quote(message)
    print(encoded_message)
    whatsapp_url = f"whatsapp://send?phone={mobile_no}&text={encoded_message}"

    # Construct the full command
    full_command = f'start "" "{whatsapp_url}"'

    # Open WhatsApp with the constructed URL using cmd.exe
    subprocess.run(full_command, shell=True)
    time.sleep(5)
    subprocess.run(full_command, shell=True)
    pyautogui.hotkey('ctrl', 'f')

    for i in range(1, target_tab):
        pyautogui.hotkey('tab')

    pyautogui.hotkey('enter')
    speak(jarvis_message)
except:
    speak("Not Valid") 
cached_responses = {}
all_responses = []
from reportlab.pdfgen import canvas
def save_responses_to_pdf(filename="chat_responses.pdf"):
    """Saves all chatbot responses to a PDF file."""
    c = canvas.Canvas(filename)
    c.setFont("Helvetica", 12)

    y_position = 800  # Start position for text
    for i, chat in enumerate(all_responses):
        question = f"Q{i+1}: {chat['question']}"
        response = f"A{i+1}: {chat['response']}"

        c.drawString(50, y_position, question)
        y_position -= 20  # Move down for response
        c.drawString(50, y_position, response)
        y_position -= 30  # Space between Q&A

        if y_position < 50:  # If page is full, add a new page
            c.showPage()
            c.setFont("Helvetica", 12)
            y_position = 800  # Reset position

    c.save()
import g4f
cached_responses = {}
all_responses = []
def chatBot(query):
    user_input = query.lower()
    if user_input in cached_responses:
        return cached_responses[user_input]
    try:
        response = g4f.ChatCompletion.create(
            model=g4f.models.default, 
            messages=[{"role": "user", "content": user_input}]
        )
    except Exception as e:
        response = f"An error occurred: {str(e)}"

    cached_responses[user_input] = response

    all_responses.append({
        'question':query,
        'response':response
    })
    save_responses_to_pdf()
    speak(response)
    return response
def makeCall(name, mobileNo):
    mobileNo =mobileNo.replace(" ", "")
    speak("Calling "+name)
    command = 'adb shell am start -a android.intent.action.CALL -d tel:'+mobileNo
    os.system(command)
def sendMessage(message, mobileNo, name):
    from engine.helper import replace_spaces_with_percent_s, goback, keyEvent, tapEvents, adbInput
    message = replace_spaces_with_percent_s(message)
    mobileNo = replace_spaces_with_percent_s(mobileNo)
    speak("sending message")
    goback(4)
    time.sleep(1)
    keyEvent(3)
    # open sms app
    tapEvents(540, 480)
    #start chat
    tapEvents(540, 2100)
    # search mobile no
    adbInput(mobileNo)
    #tap on name
    tapEvents(540, 750)
    # tap on input
    tapEvents(540, 2200)
    #message
    adbInput(message)
    #send
    tapEvents(900, 2300)
    speak("message send successfully to "+name)


